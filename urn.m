function urn(option, file1, file2, file3)
% option    : '1' -> 1-octave, '1/3' -> 1/3-octave
% 1-octave  : file1(*.tot), file2(*.mdl), file3(*.rad)
% 1/3-octave: file1(*.out), file2(*.mdl), file3(*.rad)

if isequal(option, '1') % 1-octave
    cenf = [31.5 63 125 250 500 1000 2000 4000 8000];
    Bandwth = [14 17 19 22 25 28 31 34 37];
    nf = 9;
else % 1/3-octave
    cenf = [25 31.5 40 50 63 80 100 125 160 200 250 315 400 500 630 800 1000 1250 1600 2000 2500 3150 4000 5000 6000 8000 10000];
    Bandwth = [12.5 13.5 14.5 15.5 16.5 17.5 18.5 19.5 20.5 21.5 22.5 23.5 24.5 25.5 26.5 27.5 28.5 29.5 30.5 31.5 32.5 33.5 34.5 35.5 36.5 37.5 38.5];
    nf = 27;
end

fid1 = fopen(file1);
fid2 = fopen(file2);
fid3 = fopen(file3, 'wt');
i = fscanf(fid2, '%f', 1);
ndata = fscanf(fid2, '%f', 11);
Nnode = ndata(1); Nele = ndata(2); Nair = ndata(3); Nbeam = ndata(4);
j = ndata(5);
fprintf(fid3, '%8d%8d%8d%8d\n', Nnode, Nele, Nair, Nbeam);

% read nodal data and element data from *.mdl
for i = 1:Nnode
    tmp = fscanf(fid2, '%f', 4);
    inode(i) = tmp(1);
    xcoor(i) = tmp(2);
    ycoor(i) = tmp(3);
    zcoor(i) = tmp(4);
end

for i = 1:Nbeam
    tmp = fscanf(fid2, '%f', 5);
    ibeam(i) = tmp(1);
    pidBeam(i) = tmp(2);
    elebeam(i,:) = tmp(3:4);
    insulB(i) = tmp(5);
end

for i = 1:Nele
    tmp = fscanf(fid2, '%f', 14);
    iele(i) = tmp(1);
    Nconn(i) = tmp(2);
    elesys(i,:) = tmp(3:6);
    pid(i) = tmp(7);
    attmat(i) = tmp(8);
    sea(i) = tmp(9);
    insul(i) = tmp(10);
    thick(i) = tmp(11);
    tA(i) = tmp(12);
    tA(i) = tmp(13);
    tA(i) = tmp(14);
end
    
eleinv(iele) = 1:length(iele);
nodinv(inode) = 1:length(inode);

% compute center of the plates
[xcen, ycen, zcen] = center(xcoor, ycoor, zcoor, Nele, Nconn, elesys, nodinv);

% compute area
for i = 1:Nele
    if Nconn(i) == 3
        aarea(i) = triang(xcoor, ycoor, zcoor, i, elesys, nodinv);
    elseif Nconn(i) == 4
        aarea(i) = rec4(xcoor, ycoor, zcoor, i, elesys, nodinv);
    end
end

% read NASS output data (*.tot)
% read input file structure-borne level
if isequal(option, '1') % 1-octave
    while true
        str = fgetl(fid1);
        tmp = str2num(str);
        if isempty(tmp)
            tmp = 0;
        end
        if tmp(1) == 10
            break
        end
    end
    
    for i = 1:Nele-1
        tmp = fscanf(fid1, '%f', 11);
        iele(i) = tmp(2);
        band(i,:) = tmp(3:end)';
    end
    
    L = 0; LL = 0;
    for i = 1:Nele-1
        k = eleinv(iele(i));
        if sea(i) == 1
            L = L + 1;
            isys(L) = i;
            t(L) = thick(i)/1000;
            A(L) = aarea(i);
            Xc(L) = xcen(i);
            Yc(L) = ycen(i);
            Zc(L) = zcen(i);
            if Nconn(i) == 3, LL = LL + 1; end
            if Nconn(i) == 4, LL = LL + 2; end
            La(L,:) = band(i,:);
            B = 2.1e11*t(L)^3/(12*0.91);
            fc = 1500^2/(2*pi)*sqrt(7800*t(L)/B);
            
            fprintf(fid3, '%8d%8.4f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f\n', ...
                isys(L), t(L), A(L), La(L,:), fc);
        end
    end
else % 1/3-octave
    iele = [];
    while ~feof(fid1)
        str = fgetl(fid1);
        idx = strfind(str, '3. Structural');
        if ~isempty(idx)
            fgetl(fid1); fgetl(fid1); fgetl(fid1);
            C = textscan(fid1, '%f%*s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f');
            fclose(fid1);
            iele = C{1};
            band = [C{2:end}];
            break
        end
    end
    
    if isempty(iele)
        warndlg({'No structure-borne level !', '', 'Check *.out file generated by NASS.'}, 'Notice', 'modla')
        return
    end
    
    L = 0;
    for i = 1:Nele
        k = eleinv(iele(i));
        if sea(k) == 1
            L = L + 1;
            isys(L) = iele(i);
            t(L) = thick(k)/1000;
            A(L) = aarea(k);
            Xc(L) = xcen(k);
            Yc(L) = ycen(k);
            Zc(L) = zcen(k);
            La(L,:) = band(i,:);
            B = 2.1e11*t(L)^3/(12*0.91);
            fc = 1500^2/(2*pi)*sqrt(7800*t(L)/B);
            
            fprintf(fid3, '%8d%8.4f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f%8.1f\n', ...
                isys(L), t(L), A(L), La(L,:), fc);
        end
    end
end
fprintf(fid3, '\n');

% chief point
% field point
Nsys = L;

% compute underwater radiated noise at far-field
if isequal(option, '1') % 1-octave
    LptotN = zeros(Nsys, 9); Lptot = LptotN;
    LptotNA = zeros(1, 9); LptotA = LptotNA;
else % 1/3-octave
    fprintf(fid3, 'Number of submerged plates = %d\n\n', L);
    LptotN = zeros(1, 27); Lptot = LptotN;
end

for i = 1:Nsys
    B = 2.1e11*t(i)^3/(12*0.91);
    S = A(i);
    fc = 1500^2/(2*pi)*sqrt(7800*t(i)/B);
    subS = A(i);
    m = 7800*t(i);
    f0 = 700*(m*sqrt(B)/subS)^0.2;
    f1 = 0.25*f0;
    f2 = 2*f0;
    f3 = 16000;
    
    % distance from plate center to receiver
    for j = 1:nf
        rad_eff(j) = Maidanic(fc, cenf(j), S, j, option);
    end
    
    for j = 1:nf
        rad10(j) = radeff(cenf(j), m, B, subS, f0, f1, f2, f3, j, option);
    end
    
    if ~isequal(option, '1')
        fprintf(fid3, 'isys = %d\n', isys(i));
        fprintf(fid3, '%8.1f', rad10); fprintf(fid3, '\n');
        fprintf(fid3, '%8.1f', rad_eff); fprintf(fid3, '\n');
        fprintf(fid3, '\n');
    end
    
    for j = 1:nf
        f = cenf(j);
        Lw(i,j) = La(i,j) + 10*log10(S) + rad10(j) - 20*log10(f) + 66;
        Lp(i,j) = Lw(i,j) - Bandwth(j) + 54;
        LwN(i,j) = La(i,j) + 10*log10(S) + rad_eff(j) - 20*log10(f) + 66;
        LpN(i,j) = LwN(i,j) - Bandwth(j) + 54;
    end
end

% total pressure
if isequal(option, '1') % 1-octave
    LptotA = 10*log10(sum(10.^(Lp/10)));
    LptotNA = 10*log10(sum(10.^(LpN/10)));
    
    fprintf(fid3, 'Far-field radiated noise from mach. including All\n');
    fprintf(fid3, '%8.1f', cenf); fprintf(fid3, '\n');
    fprintf(fid3, '%8.1f', LptotA); fprintf(fid3, '\n');
    fprintf(fid3, '%8.1f', LptotNA); fprintf(fid3, '\n');
    fprintf(fid3, '%8.1f', LptotNA-LptotA); fprintf(fid3, '\n');
    fprintf(fid3, '\n\n');
    for i = 1:Nsys
        fprintf(fid3, 'Element number :  %d\n', i);
        fprintf(fid3, '%8.1f', cenf); fprintf(fid3, '\n');
        fprintf(fid3, '%8.1f', Lp(i,:)); fprintf(fid3, '\n');
        fprintf(fid3, '%8.1f', LpN(i,:)); fprintf(fid3, '\n');
        fprintf(fid3, '\n');
    end
else % 1/3-octave
    Lptot = 10*log10(sum(10.^(Lp/10)));
    LptotN = 10*log10(sum(10.^(LpN/10)));
    
    fprintf(fid3, 'Far-field radiated noise from mach. including All\n');
    fprintf(fid3, '%8.1f', cenf); fprintf(fid3, '\n');
    fprintf(fid3, '%8.1f', Lptot); fprintf(fid3, '\n');
    fprintf(fid3, '%8.1f', LptotN); fprintf(fid3, '\n');
    fprintf(fid3, '%8.1f', LptotN-Lptot); fprintf(fid3, '\n');
end
fclose('all');

%% center
function [xc, yc, zc] = center(xcoor, ycoor, zcoor, Nele, Nconn, elesys, nodinv)
for i = 1:Nele
    switch Nconn(i)
        case 4
            i1 = nodinv(elesys(i,1));
            i2 = nodinv(elesys(i,2));
            i3 = nodinv(elesys(i,3));
            i4 = nodinv(elesys(i,4));
            
            x1 = xcoor(i1);
            x2 = xcoor(i2);
            x3 = xcoor(i3);
            x4 = xcoor(i4);
            
            y1 = ycoor(i1);
            y2 = ycoor(i2);
            y3 = ycoor(i3);
            y4 = ycoor(i4);
            
            z1 = zcoor(i1);
            z2 = zcoor(i2);
            z3 = zcoor(i3);
            z4 = zcoor(i4);
            
            xc(i) = (x1 + x2 + x3 + x4)/4;
            yc(i) = (y1 + y2 + y3 + y4)/4;
            zc(i) = (z1 + z2 + z3 + z4)/4;
        case 3
            i1 = nodinv(elesys(i,1));
            i2 = nodinv(elesys(i,2));
            i3 = nodinv(elesys(i,3));
            
            x1 = xcoor(i1);
            x2 = xcoor(i2);
            x3 = xcoor(i3);
            
            y1 = ycoor(i1);
            y2 = ycoor(i2);
            y3 = ycoor(i3);
            
            z1 = zcoor(i1);
            z2 = zcoor(i2);
            z3 = zcoor(i3);
            
            xc(i) = (x1 + x2 + x3)/3;
            yc(i) = (y1 + y2 + y3)/3;
            zc(i) = (z1 + z2 + z3)/3;
    end
end

%% Ctriarea
function area = Ctriarea(xi1, yi1, zi1, xi2, yi2, zi2, xi3, yi3, zi3)
a = sqrt((xi1-xi2)^2 + (yi1-yi2)^2 + (zi1-zi2)^2);
b = sqrt((xi2-xi3)^2 + (yi2-yi3)^2 + (zi2-zi3)^2);
c = sqrt((xi1-xi3)^2 + (yi1-yi3)^2 + (zi1-zi3)^2);

% s = perimeter
s = (a + b + c)/2;
area = sqrt(s*(s-a)*(s-b)*(s-c));

%% Maidanic
function rad_eff = Maidanic(fc, f, S, j, option)
L1 = sqrt(S);
L2 = L1;
ramda = 1500/f;
ramda_c = 1500/fc;
P = 2*(L1 + L2);
b = sqrt(f/fc);

if f < fc
    if f < 0.5*fc
        g1 = 8/(pi^4)*(1-2*b^2)/(b*sqrt(1-b^2));
    elseif f >= 0.5*fc
        g1 = 0;
    end
    cc1 = (1-b^2)*log((1+b)/(1-b)) + 2*b;
    g2 = 1/(4*pi^2)*cc1/(1-b^2)^1.5;
    cc2 = ramda*ramda_c*(f/fc);
    rad_eff = 10*log10(cc2*g1/S + P*ramda_c*g2/S) + 1;
elseif f >= fc
    rad_eff = 0;
end

if isequal(option, '1') % 1-octave
    switch j
        case 1
            rad_eff = rad_eff - 15;
        case 2
            rad_eff = rad_eff - 8;
        case {3, 4, 5, 6}
            rad_eff = rad_eff - 4;
        case 7
            rad_eff = rad_eff - 3;
        case 8
            rad_eff = rad_eff + 1;
        case 9
            rad_eff = rad_eff + 5;
    end
else % 1/3-octave
    switch j
        case {1, 2}
            rad_eff = rad_eff - 15;
        case 3
            rad_eff = rad_eff - 13;
        case 4
            rad_eff = rad_eff - 11;
        case 5
            rad_eff = rad_eff - 8;
        case 6
            rad_eff = rad_eff - 6.5;
        case 7
            rad_eff = rad_eff - 5;
        case {8, 9, 10, 11, 12, 13, 14, 15, 16, 17}
            rad_eff = rad_eff - 4;
        case 18
            rad_eff = rad_eff - 3.6;
        case 19
            rad_eff = rad_eff - 3.3;
        case 20
            rad_eff = rad_eff - 3;
        case 21
            rad_eff = rad_eff - 2;
        case 22
            rad_eff = rad_eff;
        case 23
            rad_eff = rad_eff + 1;
        case 24
            rad_eff = rad_eff + 2.5;
        case 25
            rad_eff = rad_eff + 4;
        case {26, 27}
            rad_eff = rad_eff + 5;
    end
end

%% radeff
function rad10 = radeff(f, m, B, S, f0, f1, f2, f3, j, option)
if isequal(option, '1') % 1-octave
    switch j
        case 1
            rad10 = -48;
        case 2
            rad10 = -42;
        case 3
            rad10 = -37;
        case {4, 5, 6}
            rad10 = -35;
        case 7
            rad10 = -30;
        case 8
            rad10 = -25;
        case 9
            rad10 = -20;
    end
    
else % 1/3-octave
    switch j
        case {1, 2}
            rad10 = -48;
        case 3
            rad10 = -46;
        case 4
            rad10 = -44;
        case 5
            rad10 = -42;
        case 6
            rad10 = -40;
        case 7
            rad10 = -38.5;
        case 8
            rad10 = -37;
        case 9
            rad10 = -36.3;
        case 10
            rad10 = -35.7;
        case {11, 12, 13, 14, 15, 16, 17}
            rad10 = -35;
        case 18
            rad10 = -33;
        case 19
            rad10 = -31;
        case 20
            rad10 = -30;
        case 21
            rad10 = -28.3;
        case 22
            rad10 = -26.7;
        case 23
            rad10 = -25;
        case 24
            rad10 = -23.3;
        case 25
            rad10 = -21.7;
        case 26
            rad10 = -20;
        case 27
            rad10 = -18;
    end
end

%% rec4
function area = rec4(xcoor, ycoor, zcoor, i, elesys, nodinv)
% divide plates into two trangle(1,2,3) and (1,3,4)
% 1st triangle(1,2,3)
i1 = nodinv(elesys(i,1));
i2 = nodinv(elesys(i,2));
i3 = nodinv(elesys(i,3));
area1 = triarea(xcoor, ycoor, zcoor, i1, i2, i3);

% 2nd triangle(1,3,4)
i1 = nodinv(elesys(i,1));
i3 = nodinv(elesys(i,3));
i4 = nodinv(elesys(i,4));
area2 = triarea(xcoor, ycoor, zcoor, i1, i3, i4);

area = area1 + area2;

%% triang
function area = triang(xcoor, ycoor, zcoor, i, elesys, nodinv)
% triangle(1, 2, 3)
i1 = nodinv(elesys(i,1));
i2 = nodinv(elesys(i,2));
i3 = nodinv(elesys(i,3));

area = triarea(xcoor, ycoor, zcoor, i1, i2, i3);

%% triarea
function area = triarea(xcoor, ycoor, zcoor, i1, i2, i3)
a = sqrt((xcoor(i1)-xcoor(i2))^2 + (ycoor(i1)-ycoor(i2))^2 + (zcoor(i1)-zcoor(i2))^2);
b = sqrt((xcoor(i2)-xcoor(i3))^2 + (ycoor(i2)-ycoor(i3))^2 + (zcoor(i2)-zcoor(i3))^2);
c = sqrt((xcoor(i1)-xcoor(i3))^2 + (ycoor(i1)-ycoor(i3))^2 + (zcoor(i1)-zcoor(i3))^2);

% s = perimeter
s = (a + b + c)/2;
area = sqrt(s*(s-a)*(s-b)*(s-c));